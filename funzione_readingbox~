void scan_for_obstacles(vector<int>& rows_ind, vector<int>& cols_ind, int xy_robot[2], ArLaser* laser, )
{
	ArPose* obstacle;
			for(int row = 0; row < rows_ind.size(); row++)
			{
				//quantizzare x temp e y temp per far si che siano esattamente nel centro di una cella
				//serve per mantenere i centri delle celle al posto giusto nella "griglia"
				y_temp = MyUtil::centraCoordinate(xy_robot[1] + unit * rows_ind.at(row), unit);
				for(int col = 0; col < cols_ind.size(); col++)
				{
					x_temp = MyUtil::centraCoordinate(xy_robot[0] + unit * cols_ind(col), unit);
					//double distance = robot->checkRangeDevicesCurrentBox((double) x_temp-unit/2,(double) y_temp-unit/2, (double) x_temp+unit/2, (double) y_temp+unit/2, obstacle,&laser );
					int centro_casella_robot[2]; // vettore che conterra' il risultato della trasformazione
					MyUtil::coordinateFromMineToRobot(x_temp,y_temp, centro_casella_robot);
					x_temp_robot=centro_casella_robot[0];
					y_temp_robot=centro_casella_robot[1];

					//x_temp_robot=centro_casella_robot[0]-x_robot;
					//y_temp_robot=centro_casella_robot[1]-y_robot;
					
					obstacle = new ArPose();
					double distance = laser->currentReadingBox((double) x_temp_robot-unit/2, (double) y_temp_robot+unit/2, (double) x_temp_robot+unit/2, (double) y_temp_robot-unit/2, obstacle);
					cout << "coordinate ostacolo dopo reading: x = " << obstacle->getX() << " y = " << obstacle->getY() << endl;
					//double distance = laser->currentReadingBox((double) x_temp_robot+unit/2,(double) y_temp_robot+unit/2, (double) x_temp_robot+unit/2, (double) y_temp_robot-unit/2, obstacle );
					
					/*if(obstacle->getX() == 0 && obstacle->getY() == 0 && distance >= 20000)
					{
						int coord_obstacle_on_map[2];
						MyUtil::coordinateFromRobotToMine(obstacle->getX(), obstacle->getY(), coord_obstacle_on_map);
						distance = sqrt(pow(coord_obstacle_on_map[0] - x_robot, 2) + pow(coord_obstacle_on_map[1] - y_robot, 2));
					}*/
					mappa->creaCasella(x_temp,y_temp);
					cout<<"distanza ostacolo: "<< distance <<endl;
					/*if(obstacle != NULL)
					{
						int coord_obstacle_on_map[2];
						MyUtil::coordinateFromRobotToMine(obstacle->getX(), obstacle->getY(), coord_obstacle_on_map);
						cout << "Ostacolo in : x = " << coord_obstacle_on_map[0] << " y = " << coord_obstacle_on_map[1] << endl; 
					}*/
					if(distance > 0  &&  distance < max_range)
					{
						mappa->occupaCasella(x_temp,y_temp);
						cout<<"casella occupata "<<x_temp<<" , "<<y_temp<<endl;
					}
					else
					{
						//Se la casella prima era vista come un ostacolo e ora no allora la considero libera
						if(mappa->getCasella(x_temp,y_temp)->isOstacolo()==true)
						{
							mappa->liberaCasella(x_temp,y_temp);
						}

						cout<<"casella libera  "<<x_temp<<" , "<<y_temp<<endl;
					}
				}
			}
			break;
